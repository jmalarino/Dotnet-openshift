Entiendo que usar `sed` para reemplazar el contenido JSON puede ser complicado debido a los caracteres especiales y el formato del archivo YAML. Podemos adoptar un enfoque alternativo y más seguro utilizando herramientas como `yq` para manipular el YAML directamente en lugar de `sed`.

Aquí te muestro cómo hacerlo:

### Pipeline de Release Ajustado usando `yq` (`azure-pipelines-release.yml`)

```yaml
stages:
- stage: ModifyConfigMap
  jobs:
  - job: ModifyAndDeploy
    pool:
      name: Default
      demands:
        - agent.name -equals YOUR_AGENT_NAME # Reemplaza con el nombre de tu agente auto hospedado
    steps:
    - checkout: self
      persistCredentials: true

    - checkout: GarantiasMonitoresApiManifestos
      repository: 'Garantias.Monitores.Api.Manifestos'
      endpoint: 'coelsa-garantias-service-connection' # Asegúrate de configurar una conexión de servicio válida
      persistCredentials: true
      clean: true

    - script: |
        # Define paths
        CONFIGMAP_FILE="path/to/configmap.yaml" # Reemplaza con la ruta correcta en el repo clonado
        JSON_FILE="appsettings.json"

        # Extract the JSON content from the YAML file using yq
        yq eval '.data["appsettings.json"]' $CONFIGMAP_FILE > $JSON_FILE

        # Ensure JSON_FILE exists and has content
        if [ ! -s $JSON_FILE ]; then
          echo "Error: $JSON_FILE is empty or does not exist."
          exit 1
        fi

        echo "Extracted JSON content:"
        cat $JSON_FILE
      displayName: 'Extract JSON from YAML'
      name: ExtractJson

    - task: FileTransform@1
      inputs:
        folderPath: $(System.DefaultWorkingDirectory)
        jsonTargetFiles: 'appsettings.json'
      env:
        DatabaseHost: "new-database-host.com"
        ThirdPartyAPIBaseURL: "https://new.api.url/"
      displayName: 'Transform JSON file'
      name: TransformJson

    - script: |
        # Define paths
        CONFIGMAP_FILE="path/to/configmap.yaml" # Reemplaza con la ruta correcta en el repo clonado
        JSON_FILE="appsettings.json"

        # Read the transformed JSON content
        UPDATED_JSON=$(cat $JSON_FILE | jq -c .)

        # Use yq to update the JSON content in the ConfigMap
        yq eval --inplace '.data["appsettings.json"] = "'"$UPDATED_JSON"'"' $CONFIGMAP_FILE

        echo "Updated configmap.yaml:"
        cat $CONFIGMAP_FILE
      displayName: 'Update YAML with Transformed JSON'
      name: UpdateYaml

    - script: |
        # Commit and push the changes back to the repository
        git config --global user.email "build-agent@example.com"
        git config --global user.name "Build Agent"
        git add $CONFIGMAP_FILE
        git commit -m "Updated configmap.yaml with new JSON content"
        git push
      displayName: 'Commit and Push Changes'
      name: CommitPushChanges
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
```

### Explicación del Pipeline Actualizado

1. **Pool y Agente**: Usa tu agente auto hospedado especificando su nombre en `demands`.

2. **Tarea de Checkout `self`**: Hace un checkout del repositorio actual (el repositorio del pipeline).

3. **Tarea de Checkout `GarantiasMonitoresApiManifestos`**:
   - Hace un checkout del repositorio `Garantias.Monitores.Api.Manifestos` del otro proyecto.
   - Asegúrate de tener configurada una conexión de servicio válida (`coelsa-garantias-service-connection`) que tenga permisos para acceder al repositorio remoto.

4. **Tarea de Script `Extract JSON from YAML`**:
   - Define las rutas para los archivos.
   - Utiliza `yq` para extraer el contenido JSON del archivo YAML.
   - Verifica que `JSON_FILE` exista y tenga contenido. Si no, se muestra un error y se termina el script.
   - Muestra el contenido extraído.

5. **Tarea `FileTransform`**:
   - Utiliza la tarea de Azure DevOps `FileTransform` para modificar el archivo `appsettings.json` con las variables de entorno proporcionadas (`DatabaseHost` y `ThirdPartyAPIBaseURL`).

6. **Tarea de Script `Update YAML with Transformed JSON`**:
   - Define nuevamente las rutas para los archivos.
   - Lee el JSON transformado usando `jq` y almacena el resultado en la variable `UPDATED_JSON`.
   - Usa `yq` para actualizar el archivo YAML original con el contenido JSON modificado.
   - Muestra el contenido actualizado del archivo YAML.

7. **Tarea de Script `Commit and Push Changes`**:
   - Configura el usuario de git para el commit.
   - Hace un `git add`, `git commit` y `git push` para enviar los cambios de vuelta al repositorio.
   - Usa el `SYSTEM_ACCESSTOKEN` para autenticarse y realizar el push.

Usar `yq` para manejar directamente la actualización del JSON dentro del YAML proporciona una forma más robusta y confiable de hacerlo en comparación con `sed`, especialmente cuando se trata de manipular contenido JSON complejo. Asegúrate de ajustar las rutas y configuraciones según sea necesario para tu entorno específico.
